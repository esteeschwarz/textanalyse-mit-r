[["textanalyse-ii-preprocessing.html", "7 Textanalyse II: Preprocessing 7.1 Tokenisieren und segmentieren 7.2 Reguläre Ausdrücke im Preprocessing 7.3 Satzzeichen, Zahlen und Sonderzeichen entfernen 7.4 Stoppwörter entfernen 7.5 Groß- und Kleinschreibung anpassen 7.6 Stemming 7.7 Lemmatisierung Quellen", " 7 Textanalyse II: Preprocessing Im Kapitel “Textanalyse I” haben wir bereits die grundlegenden Quanteda-Objekte kennengelernt: korpus-Objekte, tokens-Objekte und DFM-Objekte. Bei der Erstellung des tokens-Objekts wurden die Texte tokenisiert, also in einzelne Tokens zerlegt. Vor und/oder nach der Tokenisierung erfolgen häufig noch weitere Operationen zur Bereinigung und Vorbereitung der Texte, die wir im folgenden kennenlernen werden. Solche Operationen zur Vorbereitung und Bereinigung von Texten zur Analyse werden allgemein Preprocessing genannt. Dazu gehören z.B. die Entfernung von Satzzeichen und von bestimmten Wörtern, die sehr häufig vorkommen (sogenannte “Stoppwörter”), die Umwandlung aller Tokens in Kleinbuchstaben, die sogenannte “Lemmatisierung” der Texte oder die manuelle Bereinigung einzelner Tokens mithilfe von speziellen Ausdrücken, die sich “Reguläre Ausdrücke” (oder engl. “Regular Expressions”) nennen. Im Folgenden schauen wir uns diese und einige weitere Preprocessing-Schritte am Beispiel unseres Korpus deutschsprachiger belletristischer Texte an. Welche Preprocessing-Schritte im Einzelnen durchgeführt werden, hängt vom Kontext, von der Qualität der Texte und von der Forschungsfrage ab. Für manche Forschungsfragen kann es z.B. interessant sein, manche Stoppwörter beizubehalten oder zusätzliche Wörter zu entfernen. In anderen Fällen soll dagegen vielleicht mit den Grundformen der Wörter (Lemma) gearbeitet werden; die Texte müssen also “lemmatisiert” werden. Der Pipe-Operator %&gt;% In den Beispielen in diesem Kapitel kommt manchmal der sogenannte Pipe-Operator %&gt;% vor. Diesen Operator habt ihr bereits im Kapitel “R Basics IV: Funktionen und Pakete” kurz kennengelernt. Der Pipe-Operator wird verwendet, um mehrere Funktionsaufrufe miteinander zu verketten. Dabei übernimmt die nachfolgende Funktion als erstes Argument jeweils den Rückgabewert der vorhergehenden Funktion. Im folgenden Beispiel übergibt der Pipe-Operator der Funktion paste0() das Objekt satz als Argument. Die paste0()-Funktion fügt an den Satz ein Fragezeichen an und übergibt die bearbeitete Zeichenkette “Hallo, wie geht es dir?” an die Funktion strsplit(). Die Funktion strsplit() teilt dann den Satz anhand der Leerzeichen in einzelne Einheiten auf und gibt einen character-Vektor zurück. Dieser character-Vektor wird zuletzt der Variable woerter zugewiesen. satz &lt;- &quot;Hallo, wie geht es dir&quot; woerter &lt;- satz %&gt;% paste0(&quot;?&quot;) %&gt;% strsplit(&quot; &quot;) Ein Ausdruck der Art x %&gt;% f ist also äquivalent zu f(x). 7.1 Tokenisieren und segmentieren Das Tokenisieren, also das Zerlegen von Zeichenketten in Tokens, haben wir schon kennengelernt. Wir schauen uns als Beispiel wieder den Beispielsatz aus dem letzten Übungsblatt an, mit ein paar Zusätzen: library(quanteda) beispiel_1 &lt;- &quot;Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. Meine E-Mail-Adresse ist niro@gmail.com und ich bin geboren am 02-04-1965. #callme&quot; beispiel_toks &lt;- tokens(beispiel_1) print(beispiel_toks, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Hallo&quot; &quot;mein&quot; &quot;Name&quot; &quot;ist&quot; ## [5] &quot;Mr&quot; &quot;.&quot; &quot;Robert&quot; &quot;De&quot; ## [9] &quot;Niro&quot; &quot;und&quot; &quot;das&quot; &quot;ist&quot; ## [13] &quot;meine&quot; &quot;Telefonnummer&quot; &quot;:&quot; &quot;0164-452954322&quot; ## [17] &quot;.&quot; &quot;Meine&quot; &quot;E-Mail-Adresse&quot; &quot;ist&quot; ## [21] &quot;niro@gmail.com&quot; &quot;und&quot; &quot;ich&quot; &quot;bin&quot; ## [25] &quot;geboren&quot; &quot;am&quot; &quot;02-04-1965&quot; &quot;.&quot; ## [29] &quot;#callme&quot; In dem Beispielsatz werden alle Sinneinheiten richtig als Tokens erkannt. Aber was passiert, wenn z.B. die Telefonnummer und das Geburtsdatum etwas anders aussehen und anstelle eines Trennstrichs ein Schrägstrich verwendet wird? beispiel_2 &lt;- &quot;Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164/452954322. Meine E-Mail-Adresse ist niro@gmail.com und ich bin geboren am 02/04/1965. #callme&quot; beispiel_toks &lt;- tokens(beispiel_2) print(beispiel_toks, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Hallo&quot; &quot;mein&quot; &quot;Name&quot; &quot;ist&quot; ## [5] &quot;Mr&quot; &quot;.&quot; &quot;Robert&quot; &quot;De&quot; ## [9] &quot;Niro&quot; &quot;und&quot; &quot;das&quot; &quot;ist&quot; ## [13] &quot;meine&quot; &quot;Telefonnummer&quot; &quot;:&quot; &quot;0164&quot; ## [17] &quot;/&quot; &quot;452954322&quot; &quot;.&quot; &quot;Meine&quot; ## [21] &quot;E-Mail-Adresse&quot; &quot;ist&quot; &quot;niro@gmail.com&quot; &quot;und&quot; ## [25] &quot;ich&quot; &quot;bin&quot; &quot;geboren&quot; &quot;am&quot; ## [29] &quot;02&quot; &quot;/&quot; &quot;04&quot; &quot;/&quot; ## [33] &quot;1965&quot; &quot;.&quot; &quot;#callme&quot; Dann werden die Telefonnummer und das Geburtsdatum nicht mehr als Sinneinheiten erkannt. In diesem Fall gibt es zwei Möglichkeiten: Entweder die Tokenisierungsregeln werden angepasst, oder die Tokens, die falsch erkannt werden, werden vor dem Tokenisieren so bearbeitet, dass sie nach den bestehenden Tokenisierungsregeln als Sinneinheit erkannt werden. Die manuelle Anpassung der Tokenisierungsregeln ist recht komplex und würde den Rahmen etwas sprengen; ihr könnt allerdings bei Interesse hier nachlesen, wie das geht. Wir schauen uns stattdessen an, wie die Tokens so bearbeitet werden können, dass sie richtig erkannt werden. In unserem Beispiel geht das ganz einfach mit der R-Basisfunktion gsub(): beispiel_2 &lt;- gsub(&quot;/&quot;, &quot;-&quot;, beispiel_2) beispiel_toks &lt;- tokens(beispiel_2) print(beispiel_toks, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Hallo&quot; &quot;mein&quot; &quot;Name&quot; &quot;ist&quot; ## [5] &quot;Mr&quot; &quot;.&quot; &quot;Robert&quot; &quot;De&quot; ## [9] &quot;Niro&quot; &quot;und&quot; &quot;das&quot; &quot;ist&quot; ## [13] &quot;meine&quot; &quot;Telefonnummer&quot; &quot;:&quot; &quot;0164-452954322&quot; ## [17] &quot;.&quot; &quot;Meine&quot; &quot;E-Mail-Adresse&quot; &quot;ist&quot; ## [21] &quot;niro@gmail.com&quot; &quot;und&quot; &quot;ich&quot; &quot;bin&quot; ## [25] &quot;geboren&quot; &quot;am&quot; &quot;02-04-1965&quot; &quot;.&quot; ## [29] &quot;#callme&quot; Wenn dagegen aus irgendeinem Grund die Telefonnummer und das Geburtsdatum nicht als Sinneinheit behandelt werden sollen, sondern die Zeichen jeweils eigene Tokens bilden sollen, kann dagegen einfach beim Aufruf der tokens()-Funktion das zusätzliche Argument split_hyphens übergeben werden: beispiel_toks &lt;- tokens(beispiel_1, split_tags = TRUE, split_hyphens = TRUE ) print(beispiel_toks, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Hallo&quot; &quot;mein&quot; &quot;Name&quot; &quot;ist&quot; ## [5] &quot;Mr&quot; &quot;.&quot; &quot;Robert&quot; &quot;De&quot; ## [9] &quot;Niro&quot; &quot;und&quot; &quot;das&quot; &quot;ist&quot; ## [13] &quot;meine&quot; &quot;Telefonnummer&quot; &quot;:&quot; &quot;0164&quot; ## [17] &quot;-&quot; &quot;452954322&quot; &quot;.&quot; &quot;Meine&quot; ## [21] &quot;E&quot; &quot;-&quot; &quot;Mail&quot; &quot;-&quot; ## [25] &quot;Adresse&quot; &quot;ist&quot; &quot;niro@gmail.com&quot; &quot;und&quot; ## [29] &quot;ich&quot; &quot;bin&quot; &quot;geboren&quot; &quot;am&quot; ## [33] &quot;02&quot; &quot;-&quot; &quot;04&quot; &quot;-&quot; ## [37] &quot;1965&quot; &quot;.&quot; &quot;#&quot; &quot;callme&quot; Zeichenketten können nicht nur wie bisher in Wörter und andere Äußerungen zerlegt werden. Manchmal ist es sinnvoll, Texte in kleinere oder größere Einheiten zu zerlegen, also z.B. in einzelne Zeichen oder einzelne Sätze. Wenn Texte in größere Segmente wie Sätze zerlegt werden, nennt man diese Operation Segmentieren (oder engl. “segmentation”). Dazu kann ebenfalls die Funktion tokens() verwendet werden, mit dem zusätzlichen Argument what = \"character\" bzw. what = \"sentence\": # Segmentieren auf Satzebene beispiel_segments &lt;- tokens(beispiel_1, what = &quot;sentence&quot;) print(beispiel_segments, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322.&quot; ## [2] &quot;Meine E-Mail-Adresse ist niro@gmail.com und ich bin geboren am 02-04-1965. #callme&quot; # Tokenisieren auf Zeichenebene beispiel_chars &lt;- tokens(beispiel_1, what = &quot;character&quot;) print(beispiel_chars, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;H&quot; &quot;a&quot; &quot;l&quot; &quot;l&quot; &quot;o&quot; &quot;m&quot; &quot;e&quot; &quot;i&quot; &quot;n&quot; &quot;N&quot; &quot;a&quot; &quot;m&quot; &quot;e&quot; &quot;i&quot; &quot;s&quot; &quot;t&quot; &quot;M&quot; &quot;r&quot; ## [19] &quot;.&quot; &quot;R&quot; &quot;o&quot; &quot;b&quot; &quot;e&quot; &quot;r&quot; &quot;t&quot; &quot;D&quot; &quot;e&quot; &quot;N&quot; &quot;i&quot; &quot;r&quot; &quot;o&quot; &quot;u&quot; &quot;n&quot; &quot;d&quot; &quot;d&quot; &quot;a&quot; ## [37] &quot;s&quot; &quot;i&quot; &quot;s&quot; &quot;t&quot; &quot;m&quot; &quot;e&quot; &quot;i&quot; &quot;n&quot; &quot;e&quot; &quot;T&quot; &quot;e&quot; &quot;l&quot; &quot;e&quot; &quot;f&quot; &quot;o&quot; &quot;n&quot; &quot;n&quot; &quot;u&quot; ## [55] &quot;m&quot; &quot;m&quot; &quot;e&quot; &quot;r&quot; &quot;:&quot; &quot;0&quot; &quot;1&quot; &quot;6&quot; &quot;4&quot; &quot;-&quot; &quot;4&quot; &quot;5&quot; &quot;2&quot; &quot;9&quot; &quot;5&quot; &quot;4&quot; &quot;3&quot; &quot;2&quot; ## [73] &quot;2&quot; &quot;.&quot; &quot;M&quot; &quot;e&quot; &quot;i&quot; &quot;n&quot; &quot;e&quot; &quot;E&quot; &quot;-&quot; &quot;M&quot; &quot;a&quot; &quot;i&quot; &quot;l&quot; &quot;-&quot; &quot;A&quot; &quot;d&quot; &quot;r&quot; &quot;e&quot; ## [91] &quot;s&quot; &quot;s&quot; &quot;e&quot; &quot;i&quot; &quot;s&quot; &quot;t&quot; &quot;n&quot; &quot;i&quot; &quot;r&quot; &quot;o&quot; &quot;@&quot; &quot;g&quot; &quot;m&quot; &quot;a&quot; &quot;i&quot; &quot;l&quot; &quot;.&quot; &quot;c&quot; ## [109] &quot;o&quot; &quot;m&quot; &quot;u&quot; &quot;n&quot; &quot;d&quot; &quot;i&quot; &quot;c&quot; &quot;h&quot; &quot;b&quot; &quot;i&quot; &quot;n&quot; &quot;g&quot; &quot;e&quot; &quot;b&quot; &quot;o&quot; &quot;r&quot; &quot;e&quot; &quot;n&quot; ## [127] &quot;a&quot; &quot;m&quot; &quot;0&quot; &quot;2&quot; &quot;-&quot; &quot;0&quot; &quot;4&quot; &quot;-&quot; &quot;1&quot; &quot;9&quot; &quot;6&quot; &quot;5&quot; &quot;.&quot; &quot;#&quot; &quot;c&quot; &quot;a&quot; &quot;l&quot; &quot;l&quot; ## [145] &quot;m&quot; &quot;e&quot; Da Tokenisieren eine komplexe Operation ist, dauert es je nach Anzahl und Länge der Texte lange, bis der Computer ein komplettes Korpus tokenisiert hat. Wenn die tokens()-Funktion mit dem zusätzlichen Argument verbose = TRUE aufgerufen wird, werden beim Ausführen der Funktion Updates zu jedem Bearbeitungsschritt auf der Konsole ausgegeben: tokens(beispiel_1, verbose = TRUE) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Hallo&quot; &quot;mein&quot; &quot;Name&quot; &quot;ist&quot; &quot;Mr&quot; &quot;.&quot; &quot;Robert&quot; &quot;De&quot; ## [9] &quot;Niro&quot; &quot;und&quot; &quot;das&quot; &quot;ist&quot; ## [ ... and 17 more ] Die tokens()-Funktion kann auch zum Tokenisieren von japanisch- und chinesischsprachigen Texten verwendet werden, hierbei wird unter der Motorhaube eine morphologische Analyse durchgeführt. Ein Beispiel aus den Quanteda-Dokumentationsseiten: library(readtext) declaration &lt;- readtext(&quot;data/declaration_rights.txt&quot;) cor &lt;- corpus(declaration) toks &lt;- tokens(cor) toks ## Tokens consisting of 1 document. ## declaration_rights.txt : ## [1] &quot;鉴于&quot; &quot;对&quot; &quot;人类&quot; &quot;家庭&quot; &quot;所有&quot; &quot;成员&quot; &quot;的&quot; &quot;固有&quot; &quot;尊严&quot; &quot;及其&quot; ## [11] &quot;平等&quot; &quot;的&quot; ## [ ... and 281 more ] 7.2 Reguläre Ausdrücke im Preprocessing Manchmal ist es notwendig, eine Zeichenkette vor dem Tokenisieren manuell zu bearbeiten oder bereinigen, damit beim Preprocessing die Tokens für den jeweiligen Kontext richtig erkannt werden. Wir haben zum Beispiel gesehen, dass beim Tokenisieren manche Sinneinheiten richtig erfasst werden (z.B. Hashtags oder Telefonnummern mit -), aber andere nicht (z.B. Telefonnummern mit /, der Punkt nach einer Abkürzung wie Mr., der Nachname De Niro). Um eines dieser Probleme zu beheben, haben wir den Text manuell bearbeitet und mithilfe der Funktion gsub() alle Schrägstriche gegen Trennstriche ausgetauscht. Es kommt daneben auch vor, dass Texte bestimmte Zeichen enthalten, die keine inhaltliche Bedeutung tragen, zum Beispiel Fußnoten oder Seitenzahlen. Solche Zeichen können die Ergebnisse der Textanalyse beeinflussen und sollten deswegen im Rahmen des Preprocessing entfernt werden. Zur Suche, zum Bearbeiten und zur Entfernung von Zeichen in Zeichenketten können reguläre Ausdrücke (engl. “regular expressions”) verwendet werden. Eine ausführliche Einführung in reguläre Ausdrücke findet ihr im Kapitel “Exkurs: Reguläre Ausdrücke”. In diesem Abschnitt schauen wir uns nur an einem Beipsiel an, wie reguläre Ausdrücke beim Preprocessing zur Anwendung kommen können. Der Beispieltext froschkoenig enthält Verweise auf Fußnoten in eckigen Klammern. Diese Verweise wollen wir nun entfernen. Die bereits bekannte Funktion gsub() kann verwendet werden, um mithilfe von regulären Ausdrücken Muster zu definieren, die in einer Zeichenkette ausgetauscht werden sollen. Um alle Verweise zu entfernen, definieren wir einen regulären Ausdruck, der nach einem Leerzeichen gefolgt von mehr als einer (+) Zahl zwischen 0 und 9 ([0-9]) innerhalb von eckigen Klammern (\\\\[ oder \\\\]) sucht und durch einen leeren String (\"\") austauscht. Bevor wir die Seitenzahlen entfernen, sollten wir uns allerdings die Suchergebnisse anzeigen lassen, um zu überprüfen, ob der reguläre Ausdruck die richtigen Zeichenketten findet: froschkoenig &lt;- &quot;In den alten Zeiten [1], wo das Wünschen noch geholfen hat, lebte ein König [2], dessen Töchter waren alle schön, aber die jüngste Tochter [3] war so schön, daß die Sonne selber, die doch so vieles gesehen hat, sich verwunderte so oft sie ihr ins Gesicht schien.&quot; regmatches(froschkoenig, gregexpr(&quot; \\\\[[0-9]+\\\\]&quot;, froschkoenig)) ## [[1]] ## [1] &quot; [1]&quot; &quot; [2]&quot; &quot; [3]&quot; froschkoenig &lt;- gsub(&quot; \\\\[[0-9]+\\\\]&quot;, &quot;&quot;, froschkoenig) froschkoenig ## [1] &quot;In den alten Zeiten, wo das Wünschen noch geholfen hat, lebte ein König, dessen Töchter waren alle schön, aber die jüngste Tochter war so schön, daß die Sonne selber, die doch so vieles gesehen hat, sich verwunderte so oft sie ihr ins Gesicht schien.&quot; Die eckige Klammer steht in einem Regex-Ausdruck für Zeichenklassen (s. “Exkurs: Reguläre Ausdrücke”). Die doppelten \\\\ werden verwendet, damit die eckige Klammer nicht als Regex-Symbol erkannt wird, sondern als ganz normales Satzzeichen. Verständnisfragen: Was passiert, wenn man die \\\\ weglässt? Was passiert, wenn man das Leerzeichen am Anfang des regulären Ausdrucks \" \\\\[[1-9]+\\\\]\" weglässt? Was machen die Funktionen gregexpr() und regmatches()? 7.3 Satzzeichen, Zahlen und Sonderzeichen entfernen Für viele Analysemethoden spielen nur Wörter im eigentlichen Sinne eine Rolle. Satzzeichen, Zahlen und Sonderzeichen werden deswegen häufig beim Preprocessing entfernt. Dieser Vorbereitungsschritt ist so verbreitet, dass die Entwickler:innen des Pakets quanteda Parameter für die tokens()-Funktion definiert haben, die steuern, ob bei der Tokenisierung diese Zeichen direkt entfernt werden sollen oder nicht. froschkoenig_toks &lt;- tokens(froschkoenig, remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE) froschkoenig_toks ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;In&quot; &quot;den&quot; &quot;alten&quot; &quot;Zeiten&quot; &quot;wo&quot; &quot;das&quot; ## [7] &quot;Wünschen&quot; &quot;noch&quot; &quot;geholfen&quot; &quot;hat&quot; &quot;lebte&quot; &quot;ein&quot; ## [ ... and 32 more ] 7.4 Stoppwörter entfernen Wenn Texte zur Analyse als “Bag of Words” repräsentiert werden sollen, dann spielt die Reihenfolge der einzelnen Worte keine Rolle und Funktionswörter wie Artikel, Konjunktionen, Präpositionen u.ä. sind außerhalb des Satzzusammenhangs für diese Analysemethoden häufig nicht von Interesse. Zugleich kommen diese Wörter aber deutlich häufiger vor als “bedeutungstragende” Wörter. Solche Wörter werden deswegen häufig beim Preprocessing entfernt. Dabei werden sogenannte Stoppwortlisten verwendet: Alle Tokens, die in der Liste vorkommen, werden nach dem Tokenisieren entfernt. Die Funktionen zum Tokenisieren und zum Entfernen der Stoppwörter kann in Quanteda mithilfe des Pipe-Operators verkettet werden: # Funktion tokens_remove() zum entfernen der Stoppwörter verwenden froschkoenig_toks &lt;- tokens(froschkoenig) %&gt;% tokens_remove(pattern = stopwords(&quot;de&quot;)) print(froschkoenig_toks, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;alten&quot; &quot;Zeiten&quot; &quot;,&quot; &quot;Wünschen&quot; &quot;geholfen&quot; ## [6] &quot;,&quot; &quot;lebte&quot; &quot;König&quot; &quot;,&quot; &quot;Töchter&quot; ## [11] &quot;schön&quot; &quot;,&quot; &quot;jüngste&quot; &quot;Tochter&quot; &quot;schön&quot; ## [16] &quot;,&quot; &quot;Sonne&quot; &quot;selber&quot; &quot;,&quot; &quot;vieles&quot; ## [21] &quot;gesehen&quot; &quot;,&quot; &quot;verwunderte&quot; &quot;oft&quot; &quot;Gesicht&quot; ## [26] &quot;schien&quot; &quot;.&quot; Beim Aufruf der Funktion tokens_remove() wird mithilfe des Arguments pattern = stopwords(\"de\") eine Stoppwortliste mit deutschen Stoppwörtern übergeben. Welche Wörter die tokens_remove()-Funktion entfernt, hängt also davon ab, welche Stoppwörter auf dieser Liste stehen. Der Funktionsdokumentation können wir entnehmen, dass die Stoppwortliste einem weiteren R Paket entnommen wird. Die Liste deutscher Stoppwörter ist demzufolge: http://snowball.tartarus.org/algorithms/german/stop.txt Eine Stoppwortliste ist also im Grunde nur eine Plaintextdatei, in der in jeder Zeile ein Wort steht. Anstelle der vordefinierten Stoppwortliste kann auch eine eigene Stoppwortliste eingelesen werden. Dazu kann entweder eine Liste komplett selbst erstellt werden, oder es wird zunächst eine Stoppwortliste heruntergeladen und dann angepasst, zum Beispiel: https://github.com/solariz/german_stopwords https://github.com/stopwords-iso/stopwords-de/blob/master/stopwords-de.txt Die Liste kann angepasst werden, indem einfach Wörter in der Plaintext-Datei hinzugefügt oder entfernt werden. # Eigene Stoppwortliste einlesen custom_stopwords &lt;- readLines(&quot;stopwords.txt&quot;, encoding = &quot;UTF-8&quot;) custom_stopwords &lt;- readtext(&quot;stopwords.txt&quot;) custom_stopwords # Importierte Stoppwortliste and die tokens_remove()-Funktion übergeben froschkoenig_toks &lt;- tokens_remove(froschkoenig_toks, pattern = custom_stopwords, padding=F) Alternativ kann auch die Default-Stoppwortliste der Funktion stopwords() durch eine andere Stoppwortliste ausgetauscht werden. Um zu überprüfen, welche Stoppwortlisten es gibt: library(stopwords) stopwords_getsources() ## [1] &quot;snowball&quot; &quot;stopwords-iso&quot; &quot;misc&quot; &quot;smart&quot; ## [5] &quot;marimo&quot; &quot;ancient&quot; &quot;nltk&quot; &quot;perseus&quot; froschkoenig_toks &lt;- tokens(froschkoenig) %&gt;% tokens_remove(pattern = stopwords(&quot;de&quot;, source=&quot;nltk&quot;)) Zuletzt können mit der tokens_remove()-Funktion auch nachträglich einzelne Tokens entfernt werden, die in einem Text vielleicht besonders häufig vorkommen, aber nicht auf der Stoppwortliste stehen: froschkoenig_toks &lt;- tokens_remove(froschkoenig_toks, pattern = &quot;daß&quot;, padding=F) 7.5 Groß- und Kleinschreibung anpassen Wir haben bereits gesehen, dass dasselbe Wort groß- und kleingeschrieben als zwei verschiedene Types gezählt wird. Dieses Verhalten ist bei der Analyse oft nicht gewünscht, da die unterschiedliche Schreibweise meist nicht als inhaltlich bedeutungstragend angesehen wird. Beim Preprocessing kann deswegen zusätzlich der gesamte Text in Kleinbuchstaben umgewandelt werden: froschkoenig_toks &lt;- froschkoenig %&gt;% tokens(remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE) %&gt;% tokens_tolower() froschkoenig_toks ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;in&quot; &quot;den&quot; &quot;alten&quot; &quot;zeiten&quot; &quot;wo&quot; &quot;das&quot; ## [7] &quot;wünschen&quot; &quot;noch&quot; &quot;geholfen&quot; &quot;hat&quot; &quot;lebte&quot; &quot;ein&quot; ## [ ... and 32 more ] 7.6 Stemming “a simpler version of lemmatization in which we mainly just strip suffixes from the end of the word” Quelle: Jurafsky/Martin 2023, S. 2 Beim Stemming werden Wörter auf ihren Wortstamm reduziert, indem Wortendungen nach bestimmten Regeln entfernt werden. Das Stemming schauen wir uns nur äußerst kurz an, denn in der Praxis lohnt es sich selten, dieses Verfahren anzuwenden. Zum Stemming kann die quanteda-Funktion tokens_wordstem() verwendet werden: library(quanteda) beispiel &lt;- &quot;Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. Meine E-Mail-Adresse ist niro@gmail.com und ich bin geboren am 02/04/1965. #callme&quot; beispiel_stem &lt;- tokens_wordstem(tokens(beispiel), language=&quot;ger&quot;) print(beispiel_stem, max_ntoken = 200) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Hallo&quot; &quot;mein&quot; &quot;Nam&quot; &quot;ist&quot; ## [5] &quot;Mr&quot; &quot;.&quot; &quot;Robert&quot; &quot;De&quot; ## [9] &quot;Niro&quot; &quot;und&quot; &quot;das&quot; &quot;ist&quot; ## [13] &quot;mein&quot; &quot;Telefonnumm&quot; &quot;:&quot; &quot;0164-452954322&quot; ## [17] &quot;.&quot; &quot;Mein&quot; &quot;E-Mail-Adress&quot; &quot;ist&quot; ## [21] &quot;niro@gmail.com&quot; &quot;und&quot; &quot;ich&quot; &quot;bin&quot; ## [25] &quot;gebor&quot; &quot;am&quot; &quot;02&quot; &quot;/&quot; ## [29] &quot;04&quot; &quot;/&quot; &quot;1965&quot; &quot;.&quot; ## [33] &quot;#callm&quot; 7.7 Lemmatisierung “the task of determining that two words have the same root, despite their surface differences” Quelle: Jurafsky/Martin 2023, S. 2 Lemmatisierung (engl. lemmatization) hat im Grunde dasselbe Ziel wie Stemming: Bei der Lemmatisierung werden Wörter auf ihre Grundform reduziert. Dazu werden jedoch komplexere Algorithmen angewandt, sodass auch Grundformen erkannt werden, die durch die einfache Entfernung von Endungen nicht richtig gebildet würden. 7.7.1 Methode 1: Lemmatisierung mit Lexikon Diese Methode kann zur Lemmatisierung englischsprachiger Texte angewandt werden. install.packages(&quot;lexicon&quot;) library(lexicon) beispiel_engl &lt;- &quot;Hello I went swimming yesterday&quot; beispiel_lemmatized_2 &lt;- tokens_replace(tokens(beispiel_engl), pattern = lexicon::hash_lemmas$token, replacement = lexicon::hash_lemmas$lemma) print(beispiel_lemmatized_2, max_ntoken = 200) # dasselbe geht auch mit der Funktion dfm_replace() 7.7.2 Methode 2: Lemmatisierung mit UDPipe Diese Methode kann zur Lemmatisierung auch von deutsch- und anderssprachigen Texten angewandt werden. Das Verfahren ist ausführlich dokumentiert in den UDPipe-Dokumentationsseiten: https://cran.r-project.org/web/packages/udpipe/vignettes/udpipe-annotation.html. In der Sitzung zum fortgeschrittenen Preprocessing werden wir noch einmal darauf zurückkommen und erarbeiten uns in diesem Abschnitt nur ein grundlegendes Verständnis der Lemmatisierung mithilfe des R Pakets udpipe. Zunächst muss das Paket udpipe installiert und geladen werden. Anschließend muss ein sogenanntes Sprachmodell heruntergeladen und eingelesen werden. Die udpipe-Sprachmodelle sind statistische Modelle, die auf einem bestimmten Datensatz “trainiert” wurden, also zum Beispiel auf einem Korpus deutschsprachiger Texte, die mit linguistischen Annotationen versehen wurden. Auf der Grundlage der Trainingsdaten können danach Bestandteile wie Wörter und Satzzeichen auch in unbekannten Texten erkannt werden: Zum Beispiel Wortarten, Grundformen und syntaktische Beziehungen. Genau das passiert, wenn wir einer udpipe-Funktion wie udpipe() oder udpipe_annotate() auf unser Beispielkorpus anwenden. # 0. Vorbereitung install.packages(&quot;udpipe&quot;) library(udpipe) # Deutsches Sprachmodell herunterladen und laden ud_model &lt;- udpipe_download_model(&quot;german&quot;) ud_model &lt;- udpipe_load_model(ud_model) Es gibt zwei Funktionen aus dem Paket udpipe, mit denen Texte lemmatisiert werden können, also mit denen die Wörter in einem Text auf ihre Grundformen reduziert werden können. Die Funktion udpipe() gibt direkt einen Dataframe zurück (s.u.). Die Funktion udpipe_annotate() gibt eine Liste zurück, die in einem folgenden Schritt in einen Dataframe umgewandelt werden kann. Beide Funktionen lemmatisieren den Text nicht nur, sondern tokenisieren ihn auch und führen weitere Verarbeitungsschritte durch, auf die wir an dieser Stelle nicht weiter eingehen. Die Funktion udpipe_annotate() erlaubt es, mithilfe verschiedener Funktionsparameter festzulegen, welche dieser Verarbeitungsschritte beim Aufruf der Funktion durchgeführt werden sollen. Wir betrachten zunächst wieder unseren Beispielsatz: # 1. Mit Beispieltext beispiel &lt;- &quot;Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. Meine E-Mail-Adresse ist niro@gmail.com und ich bin geboren am 02/04/1965. #callme&quot; beispiel_df &lt;- udpipe(beispiel, ud_model) head(beispiel_df) # erste fünf Zeilen des Dataframes anzeigen ## doc_id paragraph_id sentence_id ## 1 doc1 1 1 ## 2 doc1 1 1 ## 3 doc1 1 1 ## 4 doc1 1 1 ## 5 doc1 1 1 ## 6 doc1 1 1 ## sentence ## 1 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 2 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 3 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 4 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 5 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 6 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## start end term_id token_id token lemma upos xpos ## 1 1 5 1 1 Hallo hallo X ITJ ## 2 7 10 2 2 mein mein DET PPOSAT ## 3 12 15 3 3 Name Name NOUN NN ## 4 17 19 4 4 ist sein AUX VVFIN ## 5 21 23 5 5 Mr. Mr. PROPN NE ## 6 25 30 6 6 Robert Robert PROPN NE ## feats head_token_id dep_rel ## 1 &lt;NA&gt; 3 dep ## 2 Case=Nom|Gender=Masc|Number=Sing|Poss=Yes 3 det:poss ## 3 Case=Nom|Gender=Masc|Number=Sing 5 nsubj ## 4 Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin 5 cop ## 5 Case=Nom|Gender=Masc|Number=Sing 0 root ## 6 Case=Nom|Gender=Masc|Number=Sing 5 nmod ## deps misc ## 1 &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; ## 4 &lt;NA&gt; &lt;NA&gt; ## 5 &lt;NA&gt; &lt;NA&gt; ## 6 &lt;NA&gt; &lt;NA&gt; beispiel_annotated &lt;- udpipe_annotate(ud_model, beispiel, tagger=&quot;default&quot;, parser=&quot;none&quot;) beispiel_df &lt;- as.data.frame(beispiel_annotated) head(beispiel_df) # erste fünf Zeilen des Dataframes anzeigen ## doc_id paragraph_id sentence_id ## 1 doc1 1 1 ## 2 doc1 1 1 ## 3 doc1 1 1 ## 4 doc1 1 1 ## 5 doc1 1 1 ## 6 doc1 1 1 ## sentence ## 1 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 2 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 3 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 4 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 5 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## 6 Hallo mein Name ist Mr. Robert De Niro und das ist meine Telefonnummer: 0164-452954322. ## token_id token lemma upos xpos ## 1 1 Hallo hallo X ITJ ## 2 2 mein mein DET PPOSAT ## 3 3 Name Name NOUN NN ## 4 4 ist sein AUX VVFIN ## 5 5 Mr. Mr. PROPN NE ## 6 6 Robert Robert PROPN NE ## feats head_token_id dep_rel ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 Case=Nom|Gender=Masc|Number=Sing|Poss=Yes &lt;NA&gt; &lt;NA&gt; ## 3 Case=Nom|Gender=Masc|Number=Sing &lt;NA&gt; &lt;NA&gt; ## 4 Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin &lt;NA&gt; &lt;NA&gt; ## 5 Case=Nom|Gender=Masc|Number=Sing &lt;NA&gt; &lt;NA&gt; ## 6 Case=Nom|Gender=Masc|Number=Sing &lt;NA&gt; &lt;NA&gt; ## deps misc ## 1 &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; ## 4 &lt;NA&gt; &lt;NA&gt; ## 5 &lt;NA&gt; &lt;NA&gt; ## 6 &lt;NA&gt; &lt;NA&gt; #View(beispiel_df) # ?udpipe_annotate Beachtet Zeile 29: Hier wurde das Token “am” in zwei Lemmata aufgeteilt: “an” und “der”. Dieses Verhalten müssen wir bei der Weiterverarbeitung der Lemmata beachten! Jetzt schauen wir uns an, wie nicht nur ein einziger Text, sondern ein ganzes Korpus mithilfe von udpipe lemmatisiert werden kann. Als Beispiel dient uns das Teilkorpus mit Kafka-Texten aus der letzten Stunde. Dazu erstellen wir, analog zur letzten Stunde, zunächst ein Teilkorpus aus Kafka-Texten: library(readtext) library(quanteda) ger_texte &lt;- readtext(&quot;korpus/*.txt&quot;, docvarsfrom = &quot;filenames&quot;, dvsep = &quot;_&quot;, docvarnames = c(&quot;Autor_in&quot;, &quot;Titel&quot;, &quot;Jahr&quot;), encoding = &quot;UTF-8&quot;) ger_korpus &lt;- corpus(ger_texte) kafka_korpus &lt;- corpus_subset(ger_korpus, Autor_in == &quot;kafka&quot;) Anschließend können wir die Funktion udpipe_annotate() auf unser Kafka-Korpus anwenden: library(udpipe) # 3. Mit Korpus zur Weiterverarbeitung in quanteda kafka_annotated &lt;- udpipe_annotate(ud_model, kafka_korpus, tagger=&quot;default&quot;, parser=&quot;none&quot;, doc_id = kafka_korpus$Titel) kafka_df &lt;- as.data.frame(kafka_annotated) Da bei der Lemmatisierung Tokens wie “am” in zwei Lemmata aufgeteilt werden (“an” und “dem”), gibt es im Dataframe kafka_df einige Zeilen, in denen in der Spalte lemma der Wert NA steht. Außerdem fällt auf, dass es einige Zeilen gibt, in denen zwei mögliche Lemmata angegeben werden, die mit einem | getrennt sind, zum Beispiel fallen|fällen. Diese Zeilen sollten zunächst bereinigt werden und es muss entschieden werden, welche Variante die richtige ist. # Zeilen mit NA-Werten entfernen kafka_cleaned_df &lt;- kafka_df[!is.na(kafka_df$lemma), ] # Alle Zeilen mit zwei verschiedenen Varianten in der Spalte lemma auswählen: Hier muss ggf. im Einzelfall entschieden werden, welche Variante richtig ist! kafka_cleaned_df[grep(&quot;\\\\|&quot;, kafka_cleaned_df$lemma), ] # Als &quot;quick and dirty&quot; Methode kann z.B. einfach immer die letzte Variante ausgewählt werden kafka_cleaned_df$lemma &lt;- gsub(&quot;\\\\w+\\\\|(\\\\|\\\\w+)?&quot;, &quot;&quot;, kafka_cleaned_df$lemma) Wir haben jetzt einen bereinigten Dataframe kafka_cleaned_df, der Lemmata zu jedem der Texte in unserem Korpus enthält. Die Lemmata liegen aber immer noch als Elemente der Spalte lemma vor. Einen Dataframe dieser Form können wir nicht mithilfe von quanteda-Funktionen weiter bearbeiten. Wir müssen also irgendwie den Dataframe in eine Form bringen, die mit quanteda-Funktionen kompatibel ist. Dazu kombinieren wir die Lemmata aus jedem der Texte in einer einzigen Zeile, sodass wir einen Dataframe mit einer Zeile je Text erhalten, der in einer neuen Spalte “text” einen character Vektor mit den Lemmata aus diesem Text enthält. Ein Dataframe mit dieser Struktur ist kompatibel mit der Quanteda-corpus()-Funktion. Um unseren Dataframe zu bearbeiten, verwenden wir die Funktionen group_by() und summarise() aus dem Paket dplyr: library(dplyr) # Dataframe umformen, sodass jede Zeile einem Dokument entspricht und die Lemmata zu einem zusammenhängenden Text zusammengefügt werden kafka_grouped &lt;- kafka_cleaned_df %&gt;% group_by(doc_id) %&gt;% summarise(text = paste(lemma, collapse = &quot; &quot;)) View(kafka_grouped) # In Quanteda corpus-Objekt umwandeln kafka_lemmatized &lt;- corpus(kafka_grouped, docnames = maerchen_grouped$doc_id) # Korpus-Objekt mit den lemmatisierten Texten speichern saveRDS(kafka_lemmatized, file=&quot;kafka_lemmatized.rds&quot;) Mit dem Objekt kafka_lemmatized könnte jetzt ganz regulär mit Quanteda-Funktionen weitergearbeitet werden. Wir werden uns diesen Code und auch den Dataframe kafka_df in der Sitzung zum fortgeschrittenen Preprocessing mit UDPipe noch einmal genauer ansehen. Quellen Jurafsky, Daniel und Martin, James H. (2023), Speech and Language Processing. Chapter 2: Regular Expressions, Text Normalization, Edit Distance, https://web.stanford.edu/~jurafsky/slp3/2.pdf. ForText (2016), Glossar: Preprocessing, https://fortext.net/ueber-fortext/glossar/preprocessing. Jünger, J. and Gärtner, C. (2023), Computational Methods für die Sozial- und Geisteswissenschaften. Kapitel 9: Textanalyse, S. 361-364, https://doi.org/10.1007/978-3-658-37747-2_9. Hase, Valerie (2021), Text as Data Methods in R - Applications for Automated Analyses of News Content. Tutorial 11: Preprocessing, https://bookdown.org/valerie_hase/TextasData_HS2021/tutorial-11-preprocessing.html. Welbers, Kasper (2020), Text Analysis in R. Part 1: Preprocessing, https://www.youtube.com/watch?v=O6CGXnxPHok. Wijffels, Jan (2023), UDPipe Natural Language Processing - Text Annotation, https://cran.r-project.org/web/packages/udpipe/vignettes/udpipe-annotation.html. Van Atteweldt, Wouter et al. (2022). Computational Analysis of Communication. Ch. 10.3.4: Linguistic Preprocessing, https://cssbook.net/content/chapter10.html#sec-nlp. Desagulier, Guillaume (2017). Corpus Linguistics and Statistics with R. Ch. 4.4. Regular Expressions, pp. 73-82, https://doi.org/10.1007/978-3-319-64572-8. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
